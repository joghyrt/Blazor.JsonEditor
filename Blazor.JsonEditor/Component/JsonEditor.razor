@using System.Text.Json
@using System.Linq.Expressions
@using System.Text.Json.Nodes
@using Blazor.JsonEditor.Helper

@inherits InputBase<string?>
@inject IJSRuntime JS

<div class="json-content">
    <span>{</span>
    @if (Json != null)
    {
        <div class="json-object-body">
            @foreach (var value in Json)
            {
                <div>
                    @if (JsonHelper.IsInJsonValueKind(value, new List<JsonValueKind> { JsonValueKind.Number, JsonValueKind.True, JsonValueKind.False, JsonValueKind.Null }))
                    {
                        <span class="json-property-name">"@value.Key"</span>
                        <span>:</span>
                        <span class="json-value-content json-value-number">@value.Value.ToString()</span>
                    }
                    else if (JsonHelper.IsInJsonValueKind(value, new List<JsonValueKind> { JsonValueKind.String }))
                    {
                        <span class="json-property-name">"@value.Key"</span>
                        <span>:</span>
                        <span class="json-value-content json-value-string">"@value.Value.ToString()"</span>
                    }
                    else if (JsonHelper.IsInJsonValueKind(value, new List<JsonValueKind> { JsonValueKind.Array }))
                    {
                        <span class="json-property-name">"@value.Key"</span>
                        <span>:</span>
                        <span class="json-value-content json-value-array">@value.Value.ToJsonString()</span>
                    }
                    else if (JsonHelper.IsInJsonValueKind(value, new List<JsonValueKind> { JsonValueKind.Object }))
                    {
                        <span class="json-property-name">"@value.Key"</span>
                        <span>:</span>
                        <span>
                            <span>{</span>
                            <InternalJsonEditor Value="@value.Value.ToJsonString()"
                                                ValueChanged="@(e => JsonObjectUpdated(value.Key, e))" KeyValues="KeyValues">
                            </InternalJsonEditor>
                            <span>}</span>
                        </span>
                    }
                    @if (Json.LastOrDefault().Key != value.Key)
                    {
                        <span>,</span>
                    }
                    @if (!JsonHelper.IsInJsonValueKind(value, new List<JsonValueKind> { JsonValueKind.Object }))
                    {
                        <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"
                                        EditingPropertyName="@value.Key">
                        </JsonItemEditor>
                    }
                    <span>
                        <button type="button" class="json-btn json-btn-danger" @onclick="@(() => RemoveValue(value.Key))">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                </div>
            }
            <div>
                <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
            </div>
        </div>
    }
    else
    {
        <div class="json-object-body-empty">
            <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
        </div>
    }
    <span>}</span>
</div>
<ValidationMessage For="@ValidationFor"/>