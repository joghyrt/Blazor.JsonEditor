@using System.Text.Json
@using System.Text.Json.Nodes
@using Blazor.JsonEditor.Helper


@if (Json != null)
{
    <div class="json-object-body">
        @foreach (var jsonItem in Json)
        {
            <div>
                @if (!JsonHelper.IsObjectValueKind(jsonItem))
                {
                    <JsonItemView JsonItem="jsonItem"></JsonItemView>
                }
                else
                {
                    <span class="json-property-name">"@jsonItem.Key"</span>
                    <span>:</span>
                    <span>
                        <span>{</span>
                        <InternalJsonEditor Value="@jsonItem.Value.ToJsonString()"
                                            ValueChanged="@(e => JsonObjectUpdated(jsonItem.Key, e))" KeyValues="KeyValues">
                        </InternalJsonEditor>
                        <span>}</span>
                    </span>
                }

                @if (Json.LastOrDefault().Key != jsonItem.Key)
                {
                    <span>,</span>
                }
                
                @if (!JsonHelper.IsInJsonValueKind(jsonItem, new List<JsonValueKind> { JsonValueKind.Object }))
                {
                    <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"
                                    EditingPropertyName="@jsonItem.Key">
                    </JsonItemEditor>
                }
                <span>
                    <button type="button" class="json-button json-button-danger" @onclick="@(() => RemoveValue(jsonItem.Key))">
                        <i class="fas fa-times"></i>
                    </button>
                </span>
            </div>
        }
        <div>
            <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
        </div>
    </div>
}
else
{
    <JsonItemEditor JsonObject="@Json" JsonObjectChanged="@ValueUpdated" KeyValues="KeyValues"></JsonItemEditor>
}